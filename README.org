#+PROPERTY: header-args:bash :prologue "exec 2>&1" :epilogue ":"
* Puzzles
** 2021
*** 1 - Sonar Sweep
   Find how many are increasing with respect to the previous value.

   + Things needed:
     - read data
     - see if next > previous
     - count the elements.
*** 2 - Dive
   Find where we end up...

   + Things needed:
     - read data, separate string and integer
     - add up values accordingly to each variable
     - multiply the values.
**** Run it:
    #+begin_src bash :dir ./ :results drawer
     echo "-------- good inputs ----------------------------"
     ./target/debug/AoCRust 2 ./data/2021_p2_input
   #+end_src

   #+RESULTS:
   :results:
   -------- good inputs ----------------------------
   Welcome to AoC solutions with RUST! (cc 2021)
   I'm going to run 2 with ./data/2021_p2_input as input
   Running puzzle 2 with ./data/2021_p2_input as input
   Moving following the instructions you provide through ./data/2021_p2_input
   .... weee  .... dooown .... up ...
   Final displacement 1580000
   :end:
** 2023
*** Trebuchet?!
   Find the first and last number on a set of strings, and sum them all.

   + Things needed:
     - read strings and separate strings and numbers
     - sum the elements on an array.

* Setup
** 1 create project for all puzzles
   [[https://doc.rust-lang.org/cargo/guide/creating-a-new-project.html][Creating a new Project]]
   #+begin_src bash :results drawer
     cargo new AoCRust --bin
   #+end_src

   #+RESULTS:
   :results:
   :end:
** 2 Create a command line to accept multiple puzzles
   [[https://doc.rust-lang.org/rust-by-example/std_misc/arg/matching.html][Argument parsing book example]]
** 3 compile and run

   =M-m m c c=
   #+begin_src bash :dir ./ :results drawer
     cargo build
   #+end_src

   #+RESULTS:
   :results:
   :end:

   #+begin_src bash :dir ./ :results drawer
     echo "-------- No arguments ----------------------------------------"
     ./target/debug/AoCRust
     echo "-------- 1 argument ------------------------------------------"
     ./target/debug/AoCRust hello
     echo "-------- 2 arguments: good inputs ----------------------------"
     ./target/debug/AoCRust 1 file
     echo "-------- 2 arguments: no implemented -------------------------"
     ./target/debug/AoCRust 2 file
     echo "---------2 arguments: bad input ------------------------------"
     ./target/debug/AoCRust one file
   #+end_src

   #+RESULTS:
   :results:
   -------- No arguments ----------------------------------------
   Welcome to AoC solutions with RUST! (cc 2021)
   usage:
   rustaoc <puzzle_number> <input>
       runs the puzzle for the given input.


   -------- 1 argument ------------------------------------------
   Welcome to AoC solutions with RUST! (cc 2021)
   Probably you should give us an extra file!
   -------- 2 arguments: good inputs ----------------------------
   Welcome to AoC solutions with RUST! (cc 2021)
   I'm going to run 1 with file as input
   Running puzzle 1 with file as input
   Running a sonar sweep through file
   .... beeep .... beeep .... beeep ...
   -------- 2 arguments: no implemented -------------------------
   Welcome to AoC solutions with RUST! (cc 2021)
   I'm going to run 2 with file as input
   Puzzle 2 hasn't been implemented yet
   ---------2 arguments: bad input ------------------------------
   Welcome to AoC solutions with RUST! (cc 2021)
   I'm going to run one with file as input
   error: The puzzle number to execute should be an integer number
   :end:
** 4 Add a way to read files
   [[https://doc.rust-lang.org/book/ch12-02-reading-a-file.html][reading a file]]
   #+begin_src bash :dir ./ :results drawer
     echo "-------- 2 arguments: file doesn't exist ---------------------"
     ./target/debug/AoCRust 1 file
     echo "-------- 2 arguments: good inputs ----------------------------"
     ./target/debug/AoCRust 1 ./data/2021_p1_input
   #+end_src

   #+RESULTS:
   :results:
   -------- 2 arguments: file doesn't exist ---------------------
   Welcome to AoC solutions with RUST! (cc 2021)
   I'm going to run 1 with file as input
   Running puzzle 1 with file as input
   Running a sonar sweep through file
   .... beeep .... beeep .... beeep ...
   thread 'main' panicked at 'Something went wrong reading the file: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/main.rs:58:10
   note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
   -------- 2 arguments: good inputs ----------------------------
   Welcome to AoC solutions with RUST! (cc 2021)
   I'm going to run 1 with ./data/2021_p1_input as input
   Running puzzle 1 with ./data/2021_p1_input as input
   Running a sonar sweep through ./data/2021_p1_input
   .... beeep .... beeep .... beeep ...
   2000 data points
   First data point: 193
   Last data point: 2658
   Filter (count bools) time: 264.52¬µs
   Map (sum bools) time: 256.59¬µs
   Number of increases for part 1: 1162
   Number of increases for part 2: 1190
   :end:

** 4 run tests

   =M-m m t a=
   #+begin_src bash :dir ./ :results drawer
     cargo test
   #+end_src

   #+RESULTS:
   :results:
      Compiling AoCRust v0.1.0
   warning: crate `AoCRust` should have a snake case name
     |
     = note: `#[warn(non_snake_case)]` on by default
     = help: convert the identifier to snake case: `ao_crust`

   warning: `AoCRust` (bin "AoCRust" test) generated 1 warning
       Finished test [unoptimized + debuginfo] target(s) in 0.40s
        Running unittests (target/debug/deps/AoCRust-0de2b4def5123c6d)

   running 1 test
   test tests::number_of_increases_given ... ok

   test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

   :end:

* Learning path
  üòï are things that I still don't understand.

** RUST
   - [[https://doc.rust-lang.org/rust-by-example/std_misc/arg/matching.html][Argument parsing]]
   - [[https://doc.rust-lang.org/rust-by-example/flow_control/match.html][match]]:
     - you can use =|= to add multiple options.
   - [[https://doc.rust-lang.org/rust-by-example/fn.html][functions]]:
     - =argument: type= syntax
     - üòï using =&String=, as that's what gets from =env=
   - [[https://doc.rust-lang.org/book/ch12-02-reading-a-file.html][reading a file]]:
     - fs::read_to_string:
       - has =.len()= and provides number of characters.
         - =.len()= has type usize
       - [[https://doc.rust-lang.org/std/primitive.str.html#method.lines][str's lines method]]: =.lines()= can break the lines into multiple
         - but you can't used =len= on lines because it returns an iterator.
   - =.collect= [[https://stackoverflow.com/a/47152394/1087595][converts an iterator]] into a =Vec= or to anything that implements =FromIterator<&str>=
   - =.map= for mapping!
   - =.parse()= [[https://doc.rust-lang.org/stable/std/primitive.str.html#method.parse][tries to convert automatically]], but you can pass a turbofish ::<> !!
   - üòï There are vectors =vec![]= and arrays =[ ]=.
   - =.filter= works as expected!
   - I can't pass the same value to two functions, as that would be "moving" the
     data, and the ownership is lost. We can borrow it by giving a reference
     (&..) or create a duplicate (=.clone()=)
   - [[https://stackoverflow.com/a/57341631/1087595][How to quickly benchmark a function]]
   - use =_variable_name= if you intend to create it and not use it
   - üòï - Strings, str and how to create a string vector. I [[https://stackoverflow.com/a/38186733/1087595][almost got it to the right place]].
     - `s.to_string()` vs `s.into()`?



** emacs
   - I had to install rls to get the lsp working:
     #+begin_src bash
      rustup component add rls
     #+end_src

   - org-mode: [[https://emacs.stackexchange.com/a/59879/6658][how to get stdout/err in the output]]

   - spacemacs commands:
     - cargo build: =M-m c c=
     - cargo test: =M-m t a=
     - Clicking on an error code opens the help within emacs! üòç - e.g., E0382
